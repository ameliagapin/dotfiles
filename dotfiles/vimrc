" Use python3 when available

if has('python3')
endif


" Vim Plug automatic installation
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fsLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com /junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

" Plug ins, managed by vim-plug
function! BuildYCM(info)
  if a:info.status == 'installed' || a:info.force
    !/usr/bin/python install.py --all
  endif
endfunction

call plug#begin()
Plug 'scrooloose/nerdtree'
"Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tpope/vim-fugitive'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'airblade/vim-gitgutter'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'jszakmeister/vim-togglecursor'
Plug 'powerline/powerline-fonts'
Plug 'luochen1990/rainbow'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-commentary' " Provides easy commenting using gcc and gc

" Language support
Plug 'neoclide/coc.nvim', {'branch': 'release', 'do': ':CocInstall coc-json coc-tsserver coc-sh coc-go coc-html coc-python coc-sql coc-docker coc-phpls '}
Plug 'fatih/vim-go', {  'do': ':GoInstallBinaries' }
Plug 'buoto/gotests-vim'
Plug 'kevinw/pyflakes-vim', { 'for': 'python' }
Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
call plug#end()

" Wait less between keypresses for combined mappings
set timeoutlen=500

" Turn off line wrapping
set nowrap

" Set noshowmode to hide --INSERT-- from status line
set noshowmode

" For pyflakes
filetype on            " enables filetype detection
filetype plugin on     " enables filetype specific plugins

" Colorz
set t_Co=256
set background=dark
colorscheme afterglow

" Make Vim more useful
set nocompatible

" Use the OS clipboard by default (on versions compiled with `+clipboard`)
set clipboard=unnamed

" Enhance command-line completion
set wildmenu

if !has('nvim')
    " Allow cursor keys in insert mode
    set esckeys

    " Highlight yanked text
    augroup LuaHighlight
      autocmd!
      autocmd TextYankPost * silent! lua require'vim.highlight'.on_yank()
    augroup END

    " Live substitution
    " not available until neovim v0.5
    " set inccommand=split
endif

" Allow backspace in insert mode
set backspace=indent,eol,start

" Optimize for fast terminal connections
set ttyfast

" Add the g flag to search/replace by default
set gdefault

" Use UTF-8 without BOM
set encoding=utf-8 nobomb

" Increase command line history.
set history=5000

" Change mapleader
let mapleader=","

" Fuck .swps
set nobackup
set noswapfile
if exists("&undodir")
    set undofile " Maintain undo history between sessions
    set undodir=~/.vim/undo
endif
set undolevels=1000

" Don’t create backups when editing files in certain directories
set backupskip=/tmp/*,/private/tmp/*

" Folding
set foldmethod=indent
set nofoldenable

" Respect modeline in files
set modeline
set modelines=4

" Enable per-directory .vimrc files and disable unsafe commands in them
set exrc
set secure

" Enable line numbers
set number

" Enable syntax highlighting
syntax on

" Highlight current line
set cursorline

" Highlight a certain column
set colorcolumn=80,120

"
" Indents, Tabs/Spaces
"
set autoindent    " If you're indented, new lines will also be indented
set smartindent   " Automatically indents lines after opening a bracket in programming languages
set expandtab     " Inserts spaces when tab is hit
set tabstop=4     " How much space Vim gives to a tab
set smarttab      " Improves tabbing
set shiftwidth=4  " Number of spaces when indenting
set softtabstop=4 " Don't think I need this in combo with the other options
" Some filetypes only get two spaces
autocmd Filetype yaml setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab 
autocmd Filetype html setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd Filetype css setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd Filetype scss setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab

" Show “invisible” characters
set list
set listchars=tab:→\ ,trail:·,nbsp:·

" Highlight searches
set hlsearch

" Ignore case of searches
set ignorecase

" Override `ignorecase` option  if the search pattern contains
" uppercase characters.
set smartcase

" Highlight dynamically as pattern is typed
set incsearch

" Clear previous search highlighting by hitting ESC ESC
nnoremap <ESC><ESC> :noh<CR><CR>

" Map 00 to ^ for going to the first non-whitespace character on a line
noremap 00 ^

" Always show status line
set laststatus=2

" Enable mouse in all modes
set mouse=a

" Enable extended regexp.
set magic

" Hide mouse pointer while typing.
set mousehide

" Disable error bells
set noerrorbells

" Don’t reset cursor to start of line when moving around.
set nostartofline

" Report the number of lines changed.
set report=0

" Show the cursor position
set ruler

" Don’t show the intro message when starting Vim
set shortmess=atI

" Show the current mode
set showmode

" Show the filename in the window titlebar
set title

" Show the (partial) command as it’s being typed
set showcmd

" Start scrolling three lines before the horizontal window border
set scrolloff=3

" Strip trailing whitespace (,ss)
function! StripWhitespace()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    :%s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfunction
noremap <leader>ss :call StripWhitespace()<CR>

" Save a file as root (,W)
noremap <leader>W :w !sudo tee % > /dev/null<CR>

" Automatic commands
if has("autocmd")
    " Strip whitespace on write for certain files
    autocmd BufWritePre *.php,*.js,*.scss,*.css,*.tpl,*.html,*.go :%s/\s\+$//e
    " Enable file type detection
    filetype plugin indent on
    " Treat .json files as .js
    autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript
    " Treat .md files as Markdown
    autocmd BufNewFile,BufRead *.md setlocal filetype=markdown
    " Autoreload files changed outside of buffer
    autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
    " Notification after file change
    autocmd FileChangedShellPost *
       \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl Nonei
endif

" Wildignore
set wildignore+=*.pyc,*.pyo,*/__pycache__/*
set wildignore+=*.DS_Store

" Better search and selection highlighting
hi Search cterm=NONE ctermfg=black ctermbg=yellow
hi Visual cterm=NONE ctermfg=black ctermbg=yellow

map <C-L> 20zl " Scroll 20 characters to the right
map <C-H> 20zh " Scroll 20 characters to the left

" Map ctrl-movement keys to window switching
map <C-w> <C-w><C-w>

" Switch to alternate buffer
noremap <C-j> :bnext<cr>
noremap <C-k> :bprevious<cr>

" Allow switching buffers without saving
set hidden

" ----------------------------------------------------------------------
" | Helper Functions                                                   |
" ----------------------------------------------------------------------

function! GetGitBranchName()
    let branchName = ""
    if exists("g:loaded_fugitive")
        let branchName = "[" . fugitive#head() . "]"
    endif
    return branchName
endfunction

" Writing mode
function! Writer()
    setlocal spell spelllang=en_us
    setlocal formatoptions=t1
    setlocal noautoindent
    setlocal shiftwidth=5
    setlocal tabstop=5
    setlocal expandtab
    setlocal wrap
    " Move by display line instead of physical line when lines are wrapped
    noremap <buffer> j gj
    noremap <buffer> k gk
endfunction
com! WR call Writer()


" ----------------------------------------------------------------------
" | Shortcut commands                                                  |
" ----------------------------------------------------------------------

" :RC to open ~/.vimrc
com! RC e ~/.vimrc

" :S to source ~/.vimrc
com! S source ~/.vimrc

" ----------------------------------------------------------------------
" | Status Line                                                        |
" ----------------------------------------------------------------------

" Terminal types:
"
"   1) term  (normal terminals, e.g.: vt100, xterm)
"   2) cterm (color terminals, e.g.: MS-DOS console, color-xterm)
"   3) gui   (GUIs)

highlight ColorColumn
    \ term=NONE
    \ cterm=NONE  ctermbg=237    ctermfg=NONE
    \ gui=NONE    guibg=#073642  guifg=NONE

highlight CursorLine
    \ term=NONE
    \ cterm=NONE  ctermbg=235  ctermfg=NONE
    \ gui=NONE    guibg=#073642  guifg=NONE

highlight CursorLineNr
    \ term=bold
    \ cterm=bold  ctermbg=NONE   ctermfg=178
    \ gui=bold    guibg=#073642  guifg=Orange

highlight LineNr
    \ term=NONE
    \ cterm=NONE  ctermfg=241    ctermbg=NONE
    \ gui=NONE    guifg=#839497  guibg=#073642

highlight User1
    \ term=NONE
    \ cterm=NONE  ctermbg=237    ctermfg=Grey
    \ gui=NONE    guibg=#073642  guifg=#839496


" ----------------------------------------------------------------------
" | Plugins                                                             |
" ----------------------------------------------------------------------

"
" NERDTree
"
nmap <C-n> :NERDTreeToggle<CR>  " Map toggle to crtl-n
nmap <S-n> :NERDTreeFind<CR>   " Map show current file to ctrl-m
let NERDTreeShowHidden=1       " Show hidden files
let NERDTreeQuitOnOpen=1      " Close after opening file
" Better color for directories
autocmd VimEnter,ColorScheme * :hi Directory guifg=#FF0000 ctermfg=red
autocmd StdinReadPre * let s:std_in=1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let g:NERDTreeGitStatusConcealBrackets = 1
nmap <Enter> <Esc> " For some reason in neovim, <Enter> opens NERDTree in normal mode and I hate this
" Open NerdTree on vim start
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" autocmd VimEnter * wincmd p    " Have cursor start in file window
"

"
" Airline
"
let g:airline#extensions#tabline#enabled = 1
" Show buffer numbers next to buffer names
let g:airline#extensions#tabline#buffer_nr_show = 1

"
" Rainbow Parentheses
"
let g:rainbow_active = 1

"
" Indent Guides
"
let g:indent_guides_auto_colors = 0
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 2
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=233 " #121212
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=233


"
" fzf
"
" user silver searcher and ignore vendor for because the vendor folder may be not be in gitignore if go.mod is set to vendor files
let $FZF_DEFAULT_COMMAND='ag --ignore-dir="vendor" -g ""'
" bind for searching project
nmap \ :Ag<SPACE>
" ignore vendor for silver searcher because the vendor folder may be not be in gitignore if go.mod is set to vendor files
command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, '--ignore-dir="vendor"', fzf#vim#with_preview())
" Bind // to show all lines in current buffer matching search
nmap // :BLines<CR>
" Bind /// to show all lines in all buffers matching search
nmap /// :Lines<CR>
" Bind ctrl-p to a fzf-powered filename search
nmap <C-p> :Files<CR>
" Bind ctrl=b to Buffers
nmap <C-b> :Buffers<cr>
" Bind cc to a fzf-powered command search
nmap <C-c> :Commands<CR>
" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

"
" vim-gitgutter
"
highlight! link SignColumn LineNr
highlight GitGutterAdd    guifg=#009900 ctermfg=2
highlight GitGutterChange guifg=#bbbb00 ctermfg=3
highlight GitGutterDelete guifg=#ff2222 ctermfg=1

"
" vimgo
"
let g:go_auto_sameids = 1 " Auto higlight all references to symbol under the cursor
set updatetime=500 " Update status line info every 100ms
let g:go_auto_type_info = 1 " Automatically show type info in status line for type under cursor
let g:go_fmt_command = "goimports"
let g:go_decls_includes = "func,type" " Show funcs and types in declaration list
nmap <leader>gi :GoInfo<CR>  " Show method signature for a Go method in status line
nmap <leader>gd :GoDoc<CR>  " Show info for a Go method in scratch area

" Highlighting - This may slow vim down
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_structs = 1
let g:go_highlight_methods = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1

nmap <leader>gt :GoAddTags<CR>  " Generate go stuct tags

"
" CoC
"
" Give more space for displaying messages.
set cmdheight=2
" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" " Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif
" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')
