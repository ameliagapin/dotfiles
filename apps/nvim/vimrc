" Vim Plug automatic installation
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fsLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin()
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-fugitive'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'airblade/vim-gitgutter'
Plug 'powerline/powerline-fonts'
Plug 'luochen1990/rainbow'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-commentary' " Provides easy commenting using gcc and gc
Plug 'tpope/vim-abolish' " Better substitutions https://github.com/tpope/vim-abolish
Plug 'junegunn/vim-peekaboo' " Add some neat register stuff
Plug 'pechorin/any-jump.vim'
Plug 'ruanyl/vim-gh-line' " Open file in github - https://github.com/ruanyl/vim-gh-line
Plug 'wellle/context.vim'

" Language support
Plug 'neoclide/coc.nvim', {'branch': 'release', 'do': ':CocInstall coc-json coc-tsserver coc-sh coc-html coc-python coc-sql coc-docker coc-phpls coc-protobuf'}
Plug 'buoto/gotests-vim'
Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
Plug 'pangloss/vim-javascript'
Plug 'peitalin/vim-jsx-typescript'
Plug 'ap/vim-css-color', { 'for': 'css' }

" Theme
Plug 'ameliagapin/palenight.vim'

command! CSV set nowrap | %s/,/,|/g | %!column -n -t -s "|" 

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" Evaluating
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'editorconfig/editorconfig-vim'
Plug 'github/copilot.vim'
inoremap <silent><script><expr> <C-Space> copilot#Accept("\<CR>")
let g:copilot_no_tab_map = v:true

"" Plug 'brooth/far.vim'
"" Plug 'sebdah/vim-delve' " Go debugging support
"" let g:delve_backend = "native"

" Plug 'thiagoalessio/rainbow_levels.vim'
" " Creating a mapping to turn it on and off:
" map <leader>l :RainbowLevelsToggle<cr>
" hi! link RainbowLevel0 Constant
" hi! link RainbowLevel1 Type
" hi! link RainbowLevel2 Function
" hi! link RainbowLevel3 String
" hi! link RainbowLevel4 PreProc
" hi! link RainbowLevel5 Statement
" hi! link RainbowLevel6 Identifier
" hi! link RainbowLevel7 Normal
" hi! link RainbowLevel8 Comment


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

call plug#end()

" Wait less between keypresses for combined mappings
set timeoutlen=500

" Turn off line wrapping
set nowrap

" Set noshowmode to hide --INSERT-- from status line
set noshowmode

filetype on            " enables filetype detection
filetype plugin on     " enables filetype specific plugins

" Colorz
set t_Co=256

if (has("termguicolors"))
  set termguicolors
endif

set background=dark
let g:lightline = { 'colorscheme': 'palenight' }
let g:airline_theme = "palenight"
colorscheme palenight

"
"" Highlighting for go 
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_structs = 1
let g:go_highlight_methods = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1

" Make Vim more useful
set nocompatible

" Use the OS clipboard by default (on versions compiled with `+clipboard`)
set clipboard=unnamed

" Enhance command-line completion
set wildmenu

" change the direction of new splits
set splitbelow
set splitright

if has('nvim')
    " Highlight yanked text
    augroup LuaHighlight
      autocmd!
      autocmd TextYankPost * silent! lua require'vim.highlight'.on_yank()
    augroup END

    " Live substitution
    " not available until neovim v0.5
    set inccommand=split
endif

" Allow backspace in insert mode
set backspace=indent,eol,start

" Optimize for fast terminal connections
set ttyfast

" Add the g flag to search/replace by default
set gdefault

" Use UTF-8 without BOM
set encoding=utf-8 nobomb

" Increase command line history.
set history=5000

" Change mapleader
let mapleader=" "

" No swap
set nobackup
set noswapfile

" Maintain undo history between sessions
if exists("&undodir")
    set undofile
    set undodir=~/.vim/undo
endif
set undolevels=1000

" Don’t create backups when editing files in certain directories
set backupskip=/tmp/*,/private/tmp/*

" Folding
set foldmethod=indent
set nofoldenable

" Respect modeline in files
set modeline
set modelines=4

" Enable per-directory .vimrc files and disable unsafe commands in them
set exrc
set secure

" Enable line numbers
set number

" Highlight current line
set cursorline

" Highlight a certain column
set colorcolumn=80,120

"
" Indents, Tabs/Spaces
"
set autoindent    " If you're indented, new lines will also be indented
set smartindent   " Automatically indents lines after opening a bracket in programming languages
set expandtab     " Inserts spaces when tab is hit
set tabstop=4     " How much space Vim gives to a tab
set smarttab      " Improves tabbing
set shiftwidth=4  " Number of spaces when indenting
set softtabstop=4 " Don't think I need this in combo with the other options
set shiftround
" Some filetypes only get two spaces
autocmd Filetype yaml setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd Filetype html setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd Filetype css setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd Filetype scss setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab

" Show “invisible” characters
set list
set listchars=tab:→\ ,trail:·,nbsp:·

" Highlight searches
set hlsearch

" Ignore case of searches
set ignorecase

" Override `ignorecase` option  if the search pattern contains
" uppercase characters.
set smartcase

" Highlight dynamically as pattern is typed
set incsearch

" Clear previous search highlighting by hitting ESC ESC
nnoremap <ESC><ESC> :noh<CR><CR>

" Map 00 to ^ for going to the first non-whitespace character on a line
noremap 00 ^

" Always show status line
set laststatus=2

" Enable mouse in all modes
set mouse=a

" Enable extended regexp.
set magic

" Hide mouse pointer while typing.
set mousehide

" Disable error bells
set noerrorbells

" Don’t reset cursor to start of line when moving around.
set nostartofline

" Report the number of lines changed.
set report=0

" Show the cursor position
set ruler

" Don’t show the intro message when starting Vim
set shortmess=atI

" Show the current mode
set showmode

" Show the filename in the window titlebar
set title

" Show the (partial) command as it’s being typed
set showcmd

" Start scrolling three lines before the horizontal window border
set scrolloff=3

" Automatic commands
if has("autocmd")
    " Strip whitespace on write for certain files
    autocmd BufWritePre *.php,*.js,*.scss,*.css,*.tpl,*.html,*.go :%s/\s\+$//e
    " Treat .json files as .js
    autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript
    " Treat .md files as Markdown
    autocmd BufNewFile,BufRead *.md setlocal filetype=markdown
    " Treat .go.tmpl files as .go
    autocmd BufNewFile,BufRead *.go.tmpl set syntax=go
    " Autoreload files changed outside of buffer
    autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
    " Notification after file change
    autocmd FileChangedShellPost *
       \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl Nonei
endif

" Wildignore
set wildignore+=*.pyc,*.pyo,*/__pycache__/*
set wildignore+=*.DS_Store

" Better search and selection highlighting
hi Search cterm=NONE ctermfg=black ctermbg=yellow
hi Visual cterm=NONE ctermfg=black ctermbg=yellow

" Map ctrl-movement keys to window switching
noremap <C-w> <C-w><C-w>

" Space-space to toggle between last two buffers
" nnoremap <leader><leader> <c-^>

" Switch to alternate buffer
noremap <C-j> :bnext<cr>
noremap <C-k> :bprevious<cr>

" Navigate quickfix
noremap <leader>j :cnext<cr>
noremap <leader>k :cprevious<cr>

" Navigate locationlist
noremap <C-L> :lnext<cr>
noremap <C-H> :lprevious<cr>

" Next / Prev go fun
nnoremap ]] :call search("^func")<cr>
nnoremap [[ :call search("^func", "b")<cr>

" Allow switching buffers without saving
set hidden

" ----------------------------------------------------------------------
" | Helper Functions                                                   |
" ----------------------------------------------------------------------

function! GetGitBranchName()
    let branchName = ""
    if exists("g:loaded_fugitive")
        let branchName = "[" . fugitive#head() . "]"
    endif
    return branchName
endfunction

" Writing mode
function! Writer()
    setlocal spell spelllang=en_us
    setlocal formatoptions=t1
    setlocal noautoindent
    setlocal shiftwidth=5
    setlocal tabstop=5
    setlocal expandtab
    setlocal wrap
    setlocal linebreak
    " Move by display line instead of physical line when lines are wrapped
    noremap <buffer> j gj
    noremap <buffer> k gk
endfunction
com! WR call Writer()


" ----------------------------------------------------------------------
" | Shortcut commands                                                  |
" ----------------------------------------------------------------------

" :RC to open ~/.vimrc
com! RC e ~/.vimrc

" :S to source ~/.vimrc
com! S source ~/.vimrc

" Show the highlight group for the symbol under the curser. Good for working
" with updating colorthemes
map <leader>hg :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Strip trailing whitespace (,ss)
function! StripWhitespace()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    :%s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfunction
noremap <leader>ss :call StripWhitespace()<CR>

" Save a file as root (,W)
noremap <leader>W :w !sudo tee % > /dev/null<CR>

" :Bonly to close all buffers except current
com! Bonly :%bd|e#

" :FormatJson to format json
com! FormatJson :%!python -m json.tool

" ----------------------------------------------------------------------
" | Plugins                                                             |
" ----------------------------------------------------------------------

"
" NERDTree
"
nmap <C-n> :NERDTreeToggle<CR>  " Map toggle to crtl-n
nmap <C-f> :NERDTreeFind<CR>   " Map show current file to ctrl-f
let NERDTreeShowHidden=1       " Show hidden files
let NERDTreeQuitOnOpen=1      " Close after opening file
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let g:NERDTreeGitStatusConcealBrackets = 1
" Better color for directories
autocmd VimEnter,ColorScheme * :hi Directory guifg=#FF0000 ctermfg=red
autocmd StdinReadPre * let s:std_in=1
nmap <Enter> <Esc> " For some reason in neovim, <Enter> opens NERDTree in normal mode and I hate this

"
" Airline
"
let g:airline#extensions#tabline#enabled = 1
" Show buffer numbers next to buffer names
let g:airline#extensions#tabline#buffer_nr_show = 1

"
" Rainbow Parentheses
"
let g:rainbow_active = 1


"
" fzf
"
" user silver searcher and ignore vendor for because the vendor folder may be not be in gitignore if go.mod is set to vendor files
let $FZF_DEFAULT_COMMAND='ag --hidden --ignore .git --ignore-dir="vendor" -g ""'
" ignore vendor for silver searcher because the vendor folder may be not be in gitignore if go.mod is set to vendor files
command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, '--hidden --ignore .git --ignore-dir="vendor"', fzf#vim#with_preview())
" Raw Ag for being able to pass path
command! -bang -nargs=+ -complete=dir Rag call fzf#vim#ag_raw(<q-args>, fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}), <bang>0)
" bind for searching project
nmap \ :Ag<SPACE>
" bind for searching path
nmap <C-\> :Rag<SPACE>
" Bind // to show all lines in current buffer matching search
nmap // :BLines<CR>
" Bind /// to show all lines in all buffers matching search
nmap /// :Lines<CR>
" Bind ctrl-p to a fzf-powered filename search
nmap <C-p> :Files<CR>
" Bind ctrl=b to Buffers
nmap <C-b> :Buffers<cr>
" Bind cc to a fzf-powered command search
nmap <C-c> :Commands<CR>
" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

"
" vim-gitgutter
"
highlight! link SignColumn LineNr
highlight GitGutterAdd    guifg=#009900 ctermfg=2
highlight GitGutterChange guifg=#bbbb00 ctermfg=3
highlight GitGutterDelete guifg=#ff2222 ctermfg=1

"
" CoC
" https://github.com/neoclide/coc.nvim
" https://github.com/neoclide/coc.nvim/blob/master/data/schema.json
"
" Give more space for displaying messages.
set cmdheight=2
" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable delays and poor user experience.
set updatetime=300
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" " Use <c-space> to trigger completion.
" if has('nvim')
"   inoremap <silent><expr> <c-space> coc#refresh()
" else
"   inoremap <silent><expr> <c-@> coc#refresh()
" endif
inoremap <silent><expr> <S-TAB> coc#refresh()

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> cr :CocRestart<CR>
" Show symbol definion in floating window
nnoremap <silent> sd :call CocActionAsync('doHover')<cr>
" Rename symbol
nmap <leader>rn <Plug>(coc-rename)

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Keep signature help displayed while editing
autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

" organize/add import on save buffer for go
autocmd BufWritePre *.go :silent call CocAction('runCommand', 'editor.action.organizeImport')

"
" AnyJump
"
" Max search results, other results can be opened via [a]
let g:any_jump_max_search_results = 100
let g:any_jump_window_width_ratio  = 0.9
let g:any_jump_window_height_ratio = 0.9
let g:any_jump_window_top_offset   = 4
nnoremap <leader>jl :AnyJumpLastResults<CR>
"
"TODO: Figure out how to autoclose the popup when navigating away from results

"
" Context.vim
" https://github.com/wellle/context.vim
"
let g:context_presenter = 'nvim-float'
let g:context_border_char = '-'
let g:context_highlight_normal = 'PMenu'
let g:context_nvim_no_redraw = 1
